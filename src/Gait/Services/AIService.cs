using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel.Connectors.OpenAI;
using Gait.Configuration;

namespace Gait.Services;

public class AiService
{
    private readonly ILogger<AiService> _logger;
    private readonly IChatCompletionService _chatService;
    private readonly string _initialPrompt;

    public AiService(IOptions<OpenAIConfiguration> openAIOptions, ILogger<AiService> logger)
    {
        var openAiConfig = openAIOptions.Value;
        _logger = logger;

        _initialPrompt = LoadPromptFromFile(openAiConfig.PromptPath) ?? "Summarize the below `git diff` output.";

        if (string.IsNullOrWhiteSpace(openAiConfig.ApiKeyVar))
            throw new Exception($"OpenAI API key: {openAiConfig.ApiKeyVar} not found in configuration variables");

        var apiKey = Environment.GetEnvironmentVariable(openAiConfig.ApiKeyVar) ?? throw new Exception("OpenAI API key not found in environment variables");

        _chatService = new OpenAIChatCompletionService(openAiConfig.Model, apiKey);
        _logger.LogInformation("AI Service initialized with model: {Model}", openAiConfig.Model);
    }

    public async Task<string[]> GetDiffSummary(string[] diff)
    {
        var history = new ChatHistory();

        history.AddUserMessage(_initialPrompt);
        history.AddUserMessage("Here is the `git diff` output:");
        history.AddUserMessage(string.Join("\n", diff));

        var response = string.Empty;
        foreach (var res in await _chatService.GetChatMessageContentsAsync(history))
            response += res + "\n";

        return (response + "\n ** Generated by Gait **").Split("\n");
    }

    private string? LoadPromptFromFile(string promptPath)
    {
        if (string.IsNullOrWhiteSpace(promptPath))
        {
            _logger.LogWarning("No prompt path specified, using default prompt");
            return null;
        }

        try
        {
            if (!Path.IsPathRooted(promptPath))
                promptPath = Path.Combine(AppContext.BaseDirectory, promptPath);

            if (!File.Exists(promptPath))
            {
                _logger.LogWarning("Prompt file not found at {PromptPath}, using default prompt", promptPath);
                return null;
            }

            var prompt = File.ReadAllText(promptPath).Trim();
            _logger.LogInformation("Loaded prompt from file: {PromptPath}", promptPath);
            return prompt;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading prompt from file {PromptPath}, using default prompt", promptPath);
            return null;
        }
    }
}
